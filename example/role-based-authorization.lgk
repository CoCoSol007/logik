// Example : Role-based authorization

Types:
    User
    Role

Constants:
    Alice : User
    Bob : User
    Charlie : User
    Admin : Role
    Manager : Role
    Employee : Role

Functions:
    roleOf(User) : Role
    managerOf(User) : User

Predicates:
    Authorized(User) : "User is authorized"
    Access(User) : "User has access"
    Delegated(User, User) : "First user has delegated to second"
    Supervised(User) : "User is supervised"

Axioms:
    // Role-based authorization
    ∀u:User, roleOf(u) = Admin -> Authorized(u)

    // Delegation: if someone is authorized and delegates, the target becomes authorized
    ∀u,v:User, Authorized(u) & Delegated(u,v) -> Authorized(v)

    // Hierarchical delegation through manager relation
    ∀u:User, Authorized(managerOf(u)) -> Authorized(u)

    // Access rule
    ∀u:User, Authorized(u) -> Access(u)

Init:
    // Roles
    roleOf(Alice) = Admin
    roleOf(Bob) = Manager
    roleOf(Charlie) = Employee

    // Management
    managerOf(Charlie) = Bob

    // Delegations
    Delegated(Alice, Bob)

Eval:
    // Direct admin authorization
    Access(Alice)           // True (via role Admin)

    // Delegated from Alice to Bob
    Access(Bob)             // True (via delegation policy)

    // Bob is Charlie's manager, so Charlie inherits via hierarchy
    Authorized(Charlie)     // True

    // Possibility logic
    CanAccess(Charlie)      // True

    // Negation logic
    ~ CanAccess(Alice)      // False

    // Implication logic
    CanAccess(Charlie) -> CanAccess(Bob) // True
